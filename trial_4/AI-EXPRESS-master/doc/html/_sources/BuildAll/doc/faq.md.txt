# 常见问题
## 开发板外设连接说明
x3开发板外设接口说明，如下图：
![开发板](./image/X3Board-overview.png "")

|序号|接口说明|
| -------- | ----- |
| 1 | 12V电源接口 |
| 2 | debug串口(默认921600) |
| 3 | Camera接口 |
| 4 | micro usb接口 |
| 5 | 千兆网口(默认IP：192.168.1.10) |
| 6 | usb 2.0 x4接口 |
| 7 | HDMI输出接口 |
| 8 | LCD/TP接口 |
| 9 | 电源指示灯 |

更多硬件详情，请参照《X3SDB硬件用户手册》。

### 摄像头连接
#### os8a10
使用软排线，连接摄像头到图中Camera接口。
如果使用时获取不到图像，请重新插拔，保证软排线接入正常。
#### usb摄像头
直接把摄像头连接接入到图中6所示的usb接口。
输入命令：
```c++
ls /sys/class/video4linux/ -all
```
此目录下如果新增了video*设备，表示usb摄像头连接正常。

如下图红框，表示usb摄像头硬件连接正常。

![检查](./image/usb_camera_detected_successfully.png "红框中内容存在，表示摄像头连接正常")

## 镜像升级

镜像升级参考： https://developer.horizon.ai/forum/id=5f156192740aaf0beb3119dd

## IP设置
使用系统自带的工具设置IP地址
```C++
hrut_ipfull s IP(x.x.x.x) MASK(y.y.y.y) GATEWAY(z.z.z.z)
```
比如
```C++
hrut_ipfull s 192.168.1.100 255.255.255.0 192.168.1.1
```
命令设置完后，重启系统即可生效

## 查看系统镜像版本

```C++
cat /etc/version
uname -a
```

## 查看CPU、BPU使用率

```C++
查看cpu使用率：top
查看bpu使用率：hrut_somstatus
```

## 修改cma内存大小
cma内存用于vio图像链路以及bpu内存，若程序运行起来，提示bpu malloc failed，一种可能是代码实现过程中未及时释放bpu内存，还有一种可能情况是场景复杂，cma内存确实不足。

查看系统cma内存的方式：使用memstat命令，看cma_reserved的大小。

注意：不同版本的系统，内存分配机制不一样，memstat不一定能够查看到cma_reserved大小.

程序运行过程中，可以通过如下命令查看当前系统正在运行的所有程序占用的cma内存大小：

```
watch -n 1 cat  /sys/kernel/debug/ion/heaps/ion_cma
```

若需要修改cma内存大小，则需要连接串口，在系统启动时进入uboot模式，进入uboot模式，运行如下两个命令,则将cma内存设置为1024MB

```
setenv ion_size  1024
saveenv
```

## 镜像编译
如下命令针对X3 DVB开发板，DDR型号为samsung 2G，其他硬件规格请咨询地平线同事支持。

EMMC镜像：

```
bash ./gen_disk.sh -b xj3 -u -t Release -m samsung -a 2
```

OTA镜像：
```
bash ./gen_ota.sh -b xj3 -u -t Release -m samsung -a 2
```

## 镜像文件系统无写入权限
镜像烧录成功后，默认只有几个分区有读写权限，比如/app。/userdata默认只有读取权限，无写入权限。

若希望对所有分区都能够写入，则可以执行如下命令：
```
mount -o remount,rw /
```

## 程序编译、部署及示例运行
### 编译
这里以编译X3的版本为例，其他平台类似。
获取aiexpress开发包后解压，执行命令：
```c++
cd ai_express_release && bash build.sh x3
```
### 部署
编译完成后，执行如下命令：
```c++
bash deploy.sh
```
脚本执行完毕后，在当前目录下生产deploy部署文件夹，把deploy文件夹拷贝到目标设备上。
### 示例运行
aiexpress开发包提供了多个solution示例和交互式运行脚本，这里以body solution为例，说明如何运行示例。

提前拷贝部署包到设备上，然后进入deploy目录，执行命令：
```c++
sh run.sh w
```
命令中w表示log级别，支持i/d/w/e/f等级别日志，根据需要自行设置。

执行命令后，提示选择solution：

![菜单](./image/menu_solution.png "")

选择3（body solution）后回车，提示选择设备平台：

![菜单](./image/menu_platform.png "")

选择3（x3_sdb表示x3生态开发板）后回车，提示选择vio类型：

![菜单](./image/menu_viotype.png "")

选择1（表示单路vio输入）后回车，提示选择sensor类型：

![菜单](./image/menu_sensor.png "")

选择2（os8a10摄像头）后回车，示例程序开始启动运行。

### 编译常见报错问题

#### 提示 libxxxx.so: file format not recognized; treating as linker script

出错原因：在Windows中下载AIExpress源码后，然后将源码发送到Linux开发机，导致代码包中的symbolic link 失效。

解决方案:
方法1(推荐)：直接在Linux开发机下载代码：#  git clone git@github.com:HorizonRobotics-Platform/AI-EXPRESS.git
方法2：根据提示，自行手动创建对应库的symbolic link.

## 回灌模式
### 回灌方式说明
X3版本回灌支持3种模式，分别为cache， jpg与nv12这3个模式，区别如下：

| 回灌方式      |     功能说明       | 
| ----------     |     ------------    |
|cache|预先将所有的jpg图像解码到内存中，回灌的时候不需要再进行图像解码操|
|jpg|依次读取图像，解码，回灌。若使用循环回灌方式，则每次回灌会单独读取图像解码一次|
|nv12|和jpg的区别是回灌的图片是nv12的，只需要读取图像数据，不需要解码|


| 回灌方式       |   回灌图像配置   |
| ----------    | ------  |
|cache| **configs/vio_config.json.x3dev.fb**中image_list字段|
|jpg| **configs/vio_config.json.x3dev.fb**中配置的file_path，默认为**configs/vio_hg/name_jpg.list**|
|nv12| **configs/vio_config.json.x3dev.fb**中配置的file_path，默认为**configs/vio_hg/name_nv12.list**|

### 回灌示例
这里以body solution为例，说明如何运行回灌模式。

提前拷贝部署包到设备上，然后进入deploy目录，执行命令：
```c++
sh run.sh w
```
命令最后的w表示log级别，支持i/d/w/e/f等级别日志，根据需要自行设置。

执行命令后，提示选择solution：

![菜单](./image/menu_solution.png "")

选择3（body solution）后回车，提示选择设备平台：

![菜单](./image/menu_platform.png "")

选择3（x3_sdb表示x3生态开发板）后回车，提示选择vio类型：

![菜单](./image/menu_feedback.png "")

选择2（单路回灌模式）后回车，提示选择回灌输入类型：

![菜单](./image/menu_fb_type.png "")

选择1（选择cache模式）后回车，回灌模式示例程序开始启动运行。

## usb智慧电视场景，切换uvc与web模式
支持usb智慧电视场景的solution有：face、face_recog、body、behavior、gesture、tv_dance、tv_dance_960x544、tv_dance_no_kps_mask、tv_dance_with_kps_no_mask等。

不同solution对应不同的显示配置文件:

|solution示例|显示配置文件|
| -------- | ----- |
| face | configs/visualplugin_face.json |
| face_recog | configs/visualplugin_face.json |
| body | configs/visualplugin_body.json |
| behavior | configs/visualplugin_body.json |
| tv_dance | configs/visualplugin_body.json |
| tv_dance_960x544 | configs/visualplugin_body.json |
| tv_dance_no_kps_mask | configs/visualplugin_body.json |
| tv_dance_with_kps_no_mask | configs/visualplugin_body.json |

aiexpress的部署包默认是web模式，运行solution后，使用Chrome浏览器观看叠加算法效果后的实时视频流。

如果需要切换到uvc模式，启动前修改对应显示配置文件中的display_mode字段，对应关系如下：

|display_mode字段|模式|
| -------- | ----- |
| 1 | web模式 |
| 2 | uvc模式 |


## 视频盒子使用HDMI显示
运行视频盒子示例前，需要使用HDMI显示。系统默认未开启HDMI显示功能，系统烧录成功后，可以参考如下方法，开启HDMI显示。

1. 使用串口连接开发板，然后重启X3设备
2. 重启后根据提示随意按任意键进入uboot模式。
3. 在uboot模式中敲入如下命令：
```
setenv bootargs earlycon console=ttyS0,921600 clk_ignore_unused video=hobot:x3sdb-hdmi kgdboc=ttyS0

saveenv

boot
```

系统重启后，HDMI显示器上显示地平线LOGO，则说明HDMI显示设置成功。

## 多路IPM图像回灌
multi_input_hapi_ipm参考方案支持回灌多路IPM图像，IPM图像格式支持nv12和jpg，分辨率为256*512(注：模型输入分辨率)
回灌步骤：

### jpg格式回灌
发布版本中，默认时jpg回灌模式
进入到`deploy/configs/vio_hg/multi_fb/name_jpg_256x512`目录
替换图片并修改对应的fb_pipex.list文件即可
#### 1、准备回灌图片
images_pipe0存放第1路回灌图片，images_pipe1存放第2路回灌图片，以此类推，把需要回灌的图片放入对应目录
#### 2、修改回灌文件列表
fb_pipe0.list文件中填写第1路回灌图片路径列表，fb_pipe1.list对应第2路回灌图片路径列表，以此类推，修改成需要回灌的图片路径即可

### nv12格式回灌
进入到`deploy/configs/vio_hg/multi_fb/name_nv12_256x512`目录
#### 1、准备回灌图片
images_pipe0存放第1路回灌图片，images_pipe1存放第2路回灌图片，以此类推，把需要回灌的图片放入对应目录
#### 2、修改回灌文件列表
fb_pipe0.list文件中填写第1路回灌图片路径列表，fb_pipe1.list对应第2路回灌图片路径列表，以此类推，修改成需要回灌的图片路径即可
#### 3、修改配置
修改`deploy/configs/vio_config.json.j3dev.multi_fb_sync.256x512`配置中multi_feedback_mode字段为nv12_image_list;
配置中file_path字段修改为回灌图片的路径。

|multi_feedback_mode字段|模式|
| -------- | ----- |
| nv12_image_list | nv12图片回灌 |
| jpeg_image_list | jpg图片回灌 |

### 说明
多路回灌时，要求每一路的图片数量必须相同。
比如第一路回灌，fb_pipe0.list中填写N个图片路径，那么第二、三、四路回灌，也必须填写N个图片路径。

## VLC设置RTP Over TCP

在使用vlc调试本地RTSP视频流时，可能也会遇到视频码流花屏的情况，这里建议vlc播放器也选择tcp协议。
vlc使用tcp协议具体设置如下：

选择工具，偏好设置

![设置](./image/vlc_rtsp_local01.png "vlc设置tcp协议01")

然后选择输入/编解码器，选中RTP over RTSP(TCP)，然后保存。

![设置](./image/vlc_rtsp_local02.png "vlc设置tcp协议02")

## potplayer播放uvc及切换码流

使用potplayer拉取uvc视频播放时，选择打开设备，然后选择相应分辨率和编码方式即可拉取对应的码流。

![open_uvc](./image/potplayer_open_uvc.png "potplayer播放uvc视频")

uvc支持动态配置分辨率，可在potplayer端选择属性切换：

![set_uvc](./image/potplayer_set_uvc_attr.png "potplayer配置uvc视频")

然后可通过uvc的属性功能验证设备端的属性是否切换成功。

![get_uvc](./image/potplayer_get_uvc_attr.png "potplayer查看uvc属性")

## Core文件未生成
先设置/userdata的读写权限，然后限制指定core文件的生成路径。
``` shell
mount -o remount,rw /
ulimit -c unlimited
mkdir -p /userdata/dump
sysctl -w kernel.core_pattern=/userdata/dump/core-%e.%p.%h.%t
```
这样设置后，若程序异常crash，会将core文件保存在/userdata/dump/目录下

## GDB调试，设置动态库路径
gdb若未设置动态库路径，会提示动态库加载失败的信息，则会导致动态库的调试不可行。可以根据如下步骤设置动态库路径：

1. 在开发机查看应用依赖的依赖库
```shell
$ readelf -d pad_demo/build/bin/pad_demo  | grep NEEDED
```
2. 板上GDB环境下使用solib-search-patch设置库的路径
```shell
(gdb) set solib-search-path /home/yu/sdb/prerootfs/lib:pad_demo/build/lib/home/yu/sdb/x2j2/prebuilts/root/lib
```

## 程序运行提示vio失败
这种情况一般是由于两种原因造成：
1. Sensor排线插得不对，或者接入X3开发板的接口不对
2. AIExpress版本与系统软件版本不匹配。当前阶段请根据README.md中描述的版本关系进行测试
